#! nqp

# Test harness written in NQP (the newer nqp-rx flavor)
# by Jonathan "Duke" Leto http://leto.net

# The current canonical home for this harness is Parrot Plumage  http://gitorious.org/parrot-plumage
# Please make changes to this script in the Plumage repo

our $EXECUTABLE_NAME;
our @ARGS;
MAIN();

# TAP grammar in ABNF
# http://testanything.org/wiki/index.php/TAP_at_IETF:_Draft_Standard#Grammar

# TODO:
# verbose mode

sub MAIN () {
    pir::load_bytecode('src/lib/Glue.pbc');
    my $total_passed:= 0;
    my $total_failed:= 0;
    my $total_files := 0;
    my $failed_files:= 0;

    for @ARGS {
        my $filename := $_;
        $total_files++;

        print("$filename ...");

        my $file        := slurp($_);
        my $test_output := qx($EXECUTABLE_NAME, $filename);
        my $output      := split("\n",$test_output);
        my @plan_parts  := split('..',$output[0]);

        my $num_tests   := @plan_parts[1];
        my $curr_test   := 0;
        my $passed      := 0;
        my $failed      := 0;

        $output.shift;  # we don't need the plan anymore

        for $output {
            my $line := $_;
            if ( $line ) {
                my $line_parts := split('ok ',$line);
                my $test_number:= $line_parts[1];

                # strip out comments
                unless ($test_number > 0) {
                    my @test_num_parts := split(' -',$test_number);
                    $test_number       := @test_num_parts[0];
                }

                if ($line_parts[0] eq 'not ') {
                    $failed++;
                    $curr_test++;
                } elsif ($test_number == ($curr_test+1)) {
                    $passed++;
                    $curr_test++;
                }
            }
        }
        if ($failed) {
            say("failed $failed/$num_tests tests");
        } elsif ( @plan_parts[0] != 1 || $num_tests < 0) {
            say('INVALID PLAN: ', @plan_parts );
            $failed_files++;
        } else {
            say("passed $curr_test tests");
        }
        $total_passed := $total_passed + $passed;
        $total_failed := $total_failed + $failed;

        if ( $num_tests != $curr_test ) {
            say("Planned to run $num_tests tests but ran $curr_test tests");
            say("FAILED");
        }
    }
    if ($total_failed) {
        say("FAILED  $total_failed/",($total_passed+$total_failed));
    } elsif ($failed_files) {
        say("FAILED $failed_files files, PASSED $total_passed tests");
    } else {
        say("PASSED $total_passed tests in $total_files files");
    }
}
