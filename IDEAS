
* No retain stack is necessary, since we can store the Factor stack in a lexically scoped PMC

* Any function not inlined must have a constant stack effect, i.e. a fixed
number of inputs and outputs.  Thus, it should be possible to map stack
shuffling in between function calls into register/PMC moves/copies. In theory.
Patches Welcome!

* How to Parse Factor:

    http://docs.factorcode.org/content/article-parser-algorithm.html

* Parrot Developer Doc about Parrot Abstract Syntax Trees (PASTs)

    http://www.parrotcode.org/docs/pdd/pdd26_ast.html

* How to fiddle with your operators and precedence levels when using the Parrot Compiler Toolkit

    http://www.parrotblog.org/2008/03/episode-7-operators-and-precedence.html

* The tokens or "parsing words" of Factor:

    http://docs.factorcode.org/content/vocab-syntax.html

    This is the default syntax that Factor comes with. These are what normal mortals call
    "tokens" of other languages, but the Factor peeps call them "parsing words", because
    they are words that can act at the level of the parser, changing syntax, defining new
    words and changing the syntax of the language at a basic level.
